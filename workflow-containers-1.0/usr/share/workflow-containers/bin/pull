#!/bin/bash

# Ensure script exits on failure
set -e

# Check for required arguments
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <GITHUB_ACCESS_TOKEN> <REPO_NAME>"
    exit 1
fi

# Assign input arguments
GITHUB_TOKEN="$1"
REPO_NAME="$2"
GITHUB_USER=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | jq -r .login)

# Validate GitHub user retrieval
if [ -z "$GITHUB_USER" ] || [ "$GITHUB_USER" == "null" ]; then
    echo "Error: Unable to authenticate with GitHub. Check your access token."
    exit 1
fi

# Change to the repository directory
if [ ! -d "$REPO_NAME" ]; then
    echo "Error: Directory $REPO_NAME does not exist."
    exit 1
fi

# Check if the directory exists
if [ ! -d "$REPO_NAME" ]; then
    # Create the directory
    mkdir =p "$REPO_NAME"
    cd "$REPO_NAME"
    # Initialize Git if not already initialized
    if [ ! -d ".git" ]; then
        git init
        echo "Initialized empty Git repository in $REPO_NAME"
    fi
    git clone --depth=1 "https://$GITHUB_TOKEN@github.com/$GITHUB_USER/$REPO_NAME.git" -f
    # Set or update the GitHub remote URL
    git remote remove origin 2>/dev/null  # Prevent duplicate remote errors
    git remote add origin "https://$GITHUB_TOKEN@github.com/$GITHUB_USER/$REPO_NAME.git"
    
    # Fetch all branches from remote
    git fetch --all
else
    echo "Directory '$REPO_NAME' already exists."
    cd "$REPO_NAME"
fi


# Ensure we are on the main branch
echo "Checking out main branch..."
git checkout main

# Fetch the latest changes
echo "Fetching latest changes from GitHub..."
git fetch origin main

# Force reset the local branch to match the remote
echo "Resetting local branch to match remote main branch..."
git reset --hard origin/main

echo "âœ… Local branch has been force reset to match remote main branch."
